#!/usr/bin/env zsh

# allows the on-the-fly swapping of your git user. 
# select from any of the entries in ~/.ssh/identities.
#
# identity files should have no extension ie: "personal" or "work"
# and formatted with 2 lines:
#
# ~/.ssh/identities/example
# John Smith
# john.smith@foo.com


usage="${bold}usage${normal}:
  gituser         ${G}shows the current git user info${NC}	
  gituser <id>    ${G}set git user to identity${NC}

${bold}options:${normal}
  -h              ${G}show usage info${NC}
  -l              ${G}list all available identities${NC}

${bold}arguments:${normal}
  <id>            ${G}a file in ~/.ssh/identities/ of the form:${NC}
${B}
  John Doe
  john.doe@foo.com
${NC}"


# output the current git user info
success() {
	echo "name:  $(git config --global --get-all user.name)"
	echo "email: $(git config --global --get-all user.email)"
}


# grab the identities
local ids_dir=~/.ssh/identities/
local id=$ids_dir$1


while getopts "hl" opt; do
	case ${opt} in
		h )
			echo "$usage" >&2
			return 0
			;;
		l )
			ls -1 $ids_dir
			return 0
			;;	
	esac
done

#  no arguments, output current git user
if [[ -z $1 ]]; then
	success
	return 0
fi

# validate identity isn't malformed and continue
if [[ -f $id ]]; then
	if [[ -z $(sed '1p;d' $id) || -z $(sed '2p;d' $id) ]]; then
		echo "${R}${bold}Identity file found at $id is malformed.${NC}${normal}"
		echo "$usage" >&2
		return 1
	fi

	# unset any existing values
	git config --global --unset-all user.name
	git config --global --unset-all user.email

	# make the change with file contents
	git config --global user.name "$(sed '1p;d' $id)"
	git config --global user.email "$(sed '2p;d' $id)"

else
	echo "${R}${bold}No matching identity '$1' found.${NC}${normal}"
	echo "$usage" >&2
	return 1
fi

success
return 0